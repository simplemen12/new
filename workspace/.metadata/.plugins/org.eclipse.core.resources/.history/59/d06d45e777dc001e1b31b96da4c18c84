package problem2;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Scanner;

public class PgManager {
    HashMap<String, String> problems = new HashMap<>(); // HashMap<String, String>으로 변경
   // Map<String, HashMap<String, String>> subjects  = new HashMap<>();
    Map<String, String> users = new HashMap<>();
    String loggedInId = null;
    private static int idCounter = 1;
    private HashMap<String, Double> subjectPercentages = new HashMap<>();
    HashMap<String, ArrayList<String>> problemsBySubject = new HashMap<>();
    String loggedInUserType = null;
    HashMap<String, String> userAnswers = new HashMap<>();
    HashMap<String, String> problemAnswers = new HashMap<>();
    HashMap<String, String> problemExplain = new HashMap<>();
    HashMap<String, String> problemSubject = new HashMap<>();
    HashMap<String, String> tmp = new HashMap<>();
 // 대단원 이름을 키로 소단원과 문제를 저장할 Map
    Map<String, Map<String, String>> bigUnits = new HashMap<>();
    Map<String, Map<String, String>> bigUnitAnswers = new HashMap<>();
    Map<String, Map<String, String>> bigUnitExplanations = new HashMap<>();
    
    HashMap<String, Double> subjectRatios = new HashMap<>();
    Map<String, HashMap<String, String>> subjects  = new HashMap<>();
    
  

    
 
    
    public void createProblems() {
        int totalProblems = 20;  

        for (String subject : subjectPercentages.keySet()) {
            int numProblems = (int) Math.round(totalProblems * subjectPercentages.get(subject));  // 해당 과목의 문제 수
            for (int i = 0; i < numProblems; i++) {
                // 문제를 출제하는 코드를 여기에 작성합니다.
                // 이 부분은 문제 출제 방식에 따라 다르게 구현해야 합니다.
            }
        }
    }
    
    public void WorkbookRegister12(Scanner scan) {
        if(loggedInUserType == null || !loggedInUserType.equals("admin")) {
            System.out.println("관리자의 권한이 없습니다.");
            return;
        }
        try {
            System.out.println("문장 단위로 ox문제를 기입해주세요 .");
            String input = scan.nextLine();
            while (!input.endsWith(".")) {
                System.out.println("문장의 끝에 '.'를 붙여주세요.");
                input += " " + scan.nextLine();
            }

            System.out.println("다음 중 등록할 과목을 선택해주세요:");
            int index = 1;
            for (String subject : subjects.keySet()) {
                System.out.println(index + ". " + subject);
                index++;
            }

            String subjectSelection = scan.nextLine();
            int selectedSubjectIndex = Integer.parseInt(subjectSelection);
            List<String> subjectList = new ArrayList<>(subjects.keySet());
            if (selectedSubjectIndex >= 1 && selectedSubjectIndex <= subjectList.size()) {
                String selectedSubject = subjectList.get(selectedSubjectIndex - 1);
                String[] split = input.split(",");
                String problemId = "Q" + idCounter++;
                String problem = split[0].trim();
                String explains = split[1].trim();
                String answer = split[2].trim();

                problems.put(problemId, problem); // 문제 내용 저장
                problemAnswers.put(problemId, answer); // 정답 저장
                problemExplain.put(problemId, explains); // 해설 저장
                problemSubject.put(problemId, selectedSubject); // 단원 저장
                if (!problemsBySubject.containsKey(selectedSubject)) {
                    problemsBySubject.put(selectedSubject, new ArrayList<>());
                }
                problemsBySubject.get(selectedSubject).add(problemId);
                System.out.println("문제가 등록되었습니다. 문제 ID: " + problemId);
            } else {
                System.out.println("유효하지 않은 선택입니다.");
            }
        } catch (NumberFormatException e) {
            System.out.println("단원 번호는 숫자로 입력해주세요.");
        }
    }

    public void WorkbookRegister1(Scanner scan) {
        if(loggedInUserType == null || !loggedInUserType.equals("admin")) {
            System.out.println("관리자의 권한이 없습니다.");
            return;
        }
        try {
            System.out.println("문장 단위로 ox문제를 기입해주세요 .");
            String input = scan.nextLine();
            while (!input.endsWith(".")) {
                System.out.println("문장의 끝에 '.'를 붙여주세요.");
                input += " " + scan.nextLine();
            }

            System.out.println("문제를 등록한 과목 이름을 입력해주세요.");
            String subject = scan.nextLine();
           // System.out.println("문제를 등록한 단원을 입력해주세요."); 
           // String chapter = "단원" + scan.nextLine();

            if(subjects.containsKey(subject) ) { //&&&& subjects.get(subject).containsKey(chapter)
                String[] split = input.split(",");
                String problemId = "Q" + idCounter++;
                String problem = split[0].trim();
                String explains = split[1].trim();
                String answer = split[2].trim();

                problems.put(problemId, problem); // 문제 내용 저장
                problemAnswers.put(problemId, answer); // 정답 저장
                problemExplain.put(problemId, explains); // 해설 저장
                problemSubject.put(problemId, subject); //단원 저장-----------------
                if (!problemsBySubject.containsKey(subject)) {
                    problemsBySubject.put(subject, new ArrayList<>());
                }
                problemsBySubject.get(subject).add(problemId);
               // subjects.get(subject).put(chapter, problemId);
                System.out.println("문제가 등록되었습니다. 문제 ID: " + problemId);
            } else {
                System.out.println("과목 또는 단원이 올바르지 않습니다.");
            }
        } catch (NumberFormatException e) {
            System.out.println("단원 번호는 숫자로 입력해주세요.");
        }
    }
    
    public void SubjectRegister66(Scanner scan) {
        if (loggedInUserType == null || !loggedInUserType.equals("admin")) {
            System.out.println("관리자의 권한이 없습니다.");
            return;
        }
        
        try {
        	System.out.println(".");
            String dumy = scan.nextLine();
        	
        	
            System.out.println("과목 이름을 입력해주세요.");
            String subject = scan.nextLine();
            
            System.out.println("출제 비율을 입력해주세요 (%).");
            double ratio = Double.parseDouble(scan.nextLine());
            
            subjectRatios.put(subject, ratio);
            
        } catch (NumberFormatException e) {
            System.out.println("숫자로 입력해주세요.");
        }
        // 다음 줄에 빈 줄을 추가하여 출력을 구분합니다.
        System.out.println();
    }

    public void solveProblemsAndSaveToFile66(Scanner scan) {
        String fileNameProblems = "writer_problems_" + System.currentTimeMillis() + ".txt";
        String fileNameAnswers = "writer_answers_" + System.currentTimeMillis() + ".txt";
        String fileNameExplanations = "writer_explanations_" + System.currentTimeMillis() + ".txt";
        String combinedFileName = "combined_file_" + System.currentTimeMillis() + ".txt";

        try {
            FileWriter fwProblems = new FileWriter(fileNameProblems);
            FileWriter fwAnswers = new FileWriter(fileNameAnswers);
            FileWriter fwExplanations = new FileWriter(fileNameExplanations);
            FileWriter fwCombined = new FileWriter(combinedFileName);

            List<String> allProblemIds = new ArrayList<>(problems.keySet());
            Collections.shuffle(allProblemIds);

            for (String subject : subjectRatios.keySet()) {
                double ratio = subjectRatios.get(subject);
                /*
                //contains로 해당 과목이 있으면 ratio값을 불러와서 출제
                //예로 해사법규에서 해사안전법이 12%라고하면
                //if(contains(입력된 과목){
                 *  int numProblems = (int) Math.min(50, allProblemIds.size()) * (int) 12 / 100;
                 * 
                 * 
                 */
                int numProblems = (int) Math.min(50, allProblemIds.size()) * (int) ratio / 100;
                for (int i = 0; i < numProblems; i++) {
                    String problemId = allProblemIds.get(i);
                    String problem = problems.get(problemId);

                    // 문제를 파일에 쓰기
                    fwProblems.write("문제 ID: " + problemId + "\n");
                    fwProblems.write("문제: " + problem + "\n\n");

                    // 답안을 파일에 쓰기
                    fwAnswers.write("문제 ID: " + problemId + "\n");
                    fwAnswers.write("답안: " + problemAnswers.get(problemId) + "\n\n");

                    // 해설을 파일에 쓰기
                    fwExplanations.write("문제 ID: " + problemId + "\n");
                    fwExplanations.write("해설: " + problemExplain.get(problemId) + "\n\n");

                    // 답안과 해설을 하나의 파일에 쓰기
                    fwCombined.write("문제 ID: " + problemId + "\n");
                    fwCombined.write("답안: " + problemAnswers.get(problemId) + "\n");
                    fwCombined.write("해설: " + problemExplain.get(problemId) + "\n\n");
                }
            }

            fwProblems.close();
            fwAnswers.close();
            fwExplanations.close();
            fwCombined.close();

            System.out.println("문제를 다 풀었습니다.");
            System.out.println("문제, 답안, 해설 파일에 쓰기가 완료되었습니다.");
            System.out.println("문제 파일명: " + fileNameProblems);
            System.out.println("답안 파일명: " + fileNameAnswers);
            System.out.println("해설 파일명: " + fileNameExplanations);
            System.out.println("결합 파일명: " + combinedFileName);
        } catch (IOException e) {
            System.out.println("파일 쓰기 중 오류가 발생했습니다: " + e.getMessage());
        }
    }

   
    
    public void solveProblemsAndSaveToFile234(Scanner scan) {
        String fileNameProblems = "writer_problems_" + System.currentTimeMillis() + ".txt";
        String fileNameAnswers = "writer_answers_" + System.currentTimeMillis() + ".txt";
        String fileNameExplanations = "writer_explanations_" + System.currentTimeMillis() + ".txt";
        String combinedFileName = "combined_file_" + System.currentTimeMillis() + ".txt";

        try {
            FileWriter fwProblems = new FileWriter(fileNameProblems);
            FileWriter fwAnswers = new FileWriter(fileNameAnswers);
            FileWriter fwExplanations = new FileWriter(fileNameExplanations);
            FileWriter fwCombined = new FileWriter(combinedFileName);

            // 모든 문제 ID를 리스트에 저장
            List<String> allProblemIds = new ArrayList<>(problems.keySet());
            Collections.shuffle(allProblemIds);

            int numProblems = Math.min(50, allProblemIds.size()); // 문제가 저장된 수만큼 랜덤하게 저장
            for (int i = 0; i < numProblems; i++) {
                String problemId = allProblemIds.get(i);
                String problem = problems.get(problemId);

                System.out.println("문제 Id : " + problemId);
                System.out.println("문제 : " + problem);
                String answer = " ";
                while (!(answer.equals("O") || answer.equals("X"))) {
                    System.out.println("답을 입력하세요: (O/X)");
                    answer = scan.nextLine().toUpperCase();
                    if (!(answer.equals("O") || answer.equals("X"))) {
                        System.out.println("답변은 'O' 또는 'X'로 입력해주세요.");
                    }
                }

                userAnswers.put(problemId, answer);

                // 문제를 파일에 쓰기

                //단원저장-----------------
              
                fwProblems.write("문제: " +problemSubject.get(problemId)+ problemSubject.get(problemId) + problem + "\n\n");
//변경
                // 답안을 파일에 쓰기
                fwAnswers.write("문제 ID: " + problemId + "\n");
                fwAnswers.write("답안: " + problemAnswers.get(problemId) + "\n\n");

                // 해설을 파일에 쓰기
                fwExplanations.write("문제 ID: " + problemId + "\n");
                fwExplanations.write("해설: " + problemExplain.get(problemId) + "\n\n");

                // 답안과 해설을 하나의 파일에 쓰기
                fwCombined.write("문제 ID: " + problemId + "\n");
                fwCombined.write("답안: " +problemAnswers.get(problemId) + "\n");
                fwCombined.write("해설: " + problemExplain.get(problemId) + "\n\n");
            }

            fwProblems.close();
            fwAnswers.close();
            fwExplanations.close();
            fwCombined.close();

            System.out.println("문제를 다 풀었습니다.");
            System.out.println("문제, 답안, 해설 파일에 쓰기가 완료되었습니다.");
            System.out.println("문제 파일명: " + fileNameProblems);
            System.out.println("답안 파일명: " + fileNameAnswers);
            System.out.println("해설 파일명: " + fileNameExplanations);
            System.out.println("결합 파일명: " + combinedFileName);
        } catch (IOException e) {
            System.out.println("파일 쓰기 중 오류가 발생했습니다: " + e.getMessage());
        }
    }
    public void solveProblemsAndSaveToFile2345(Scanner scan) {
        String fileNameProblems = "writer_problems_" + System.currentTimeMillis() + ".txt";
        String fileNameAnswers = "writer_answers_" + System.currentTimeMillis() + ".txt";

        try {
            FileWriter fwProblems = new FileWriter(fileNameProblems);
            FileWriter fwAnswers = new FileWriter(fileNameAnswers);

            // 모든 문제 ID를 리스트에 저장
            List<String> allProblemIds = new ArrayList<>(problems.keySet());
            Collections.shuffle(allProblemIds);

            int numProblems = Math.min(50, allProblemIds.size()); // 문제가 저장된 수만큼 랜덤하게 저장
            for (int i = 0; i < numProblems; i++) {
                String problemId = allProblemIds.get(i);
                String problem = problems.get(problemId);
                String answer = problemAnswers.get(problemId);

                // 사용자 답변 받기
                String userAnswer = "";
                while (!(userAnswer.equals("O") || userAnswer.equals("X"))) {
                    System.out.println("답을 입력하세요: (O/X)");
                    userAnswer = scan.nextLine().toUpperCase();
                    if (!(userAnswer.equals("O") || userAnswer.equals("X"))) {
                        System.out.println("답변은 'O' 또는 'X'로 입력해주세요.");
                    }
                }
                userAnswers.put(problemId, userAnswer);

                // 문제와 답안을 파일에 쓰기
                fwProblems.write("문제 ID: " + problemId + "\n");
                fwProblems.write("단원: " + problemSubject.get(problemId) + "\n"); // 단원 추가
                fwProblems.write("문제: " + problem + "\n\n");

                fwAnswers.write("문제 ID: " + problemId + "\n");
                fwAnswers.write("정답: " + answer + "\n");
                fwAnswers.write("사용자 답변: " + userAnswer + "\n\n");
            }

            fwProblems.close();
            fwAnswers.close();

            System.out.println("문제를 다 풀었습니다.");
            System.out.println("문제, 답안, 해설 파일에 쓰기가 완료되었습니다.");
            System.out.println("문제 파일명: " + fileNameProblems);
            System.out.println("답안 파일명: " + fileNameAnswers);

        } catch (IOException e) {
            System.out.println("파일 쓰기 중 오류가 발생했습니다: " + e.getMessage());
        }
    }

  
   //ox문제 단원입력 메서드
   public void SubjectRegister(Scanner scan) {
    //1.단원의 수 입력 2. 그 단원의 출제비율 입력
         //단원은 등록되는 만큼 그 단원의 문제출제 비중을 입력 
         //총 문제수에서 입력된 비중만큼 비율로 나누어서 출제
      if(loggedInUserType == null || !loggedInUserType.equals("admin")) {
          System.out.println("관리자의 권한이 없습니다.");
          return;
      }   
      try {
         System.out.println("과목 이름을 입력해주세요.");
          scan = new Scanner(System.in);
         String subject = scan.nextLine();
          
         // System.out.println("단원 시작 범위를 입력해주세요.");
         // scan = new Scanner(System.in);
         // int startChap = Integer.parseInt(scan.nextLine());
          
        //  System.out.println("단원 끝 범위를 입력해주세요.");
        //  scan = new Scanner(System.in);
         // int endChap = Integer.parseInt(scan.nextLine());
          // 과목에 해당하는 단원이 없으면 새로 생성
        //  if(!subjects.containsKey(subject)) {
        //     subjects.put(subject, new HashMap<String, String>());
        //  }
          // 단원에 문제 등록
          HashMap<String, String> chapters = subjects.get(subject);
        //  for(int i=startChap; i<=endChap; i++) {
        //     chapters.put("단원"+i, null);
        //  }
          subjects.put(subject, chapters);
         // System.out.println(subject + " 과목의 " + startChap + " 단원부터 " + endChap +"단원까지 등록되었습니다.");

         
      }
       catch (NumberFormatException e) {
          System.out.println("단원 범위는 숫자로 입력해주세요.");
       }

   }

   //ox문제 검색 메서드
   public void Search(Scanner scan) {
      //1. 입력된 문제 검색 및 출력
      //2. 풀이한 문제 검색 및 출력
      //3. 변형한 문제 검색 및 출력
      String problemId = "";
       while (problemId.isEmpty()) {
           scan.nextLine();  // 버퍼에 남아있는 개행 문자를 처리
           System.out.println("검색하고자 하는 문제의 ID를 입력해주세요 ");
           problemId = scan.nextLine().trim();
           if (problemId.isEmpty()) {
               System.out.println("문제 ID를 입력하지 않으셨습니다. 다시 입력해주세요.");
           }
       }

       if(problems.containsKey(problemId)){
           System.out.println("문제 Id : "+problemId);
           System.out.println("문제 : "+problems.get(problemId)); 
           for(String sub : subjects.keySet()) {
               for(String chap : subjects.get(sub).keySet()) {
                  String chapProblemId = subjects.get(sub).get(chap);
                  // 단원에 등록된 문제 ID와 일치하는 경우
                   if(chapProblemId != null && chapProblemId.equals(problemId)) { 
                       System.out.println("과목 : "+sub+" / 단원 : "+chap);
                       return;
                   }
               }
           }
       } else {
           System.out.println("해당 Id의 문제를 찾을 수 없습니다.");
       }
   }
   
   
   public void SolvingPb(Scanner scan) {
   // 모든 문제 ID를 리스트에 저장
      List<String> allProblemIds = new ArrayList<>(problems.keySet());
       Collections.shuffle(allProblemIds);

       int numProblems = Math.min(20, allProblemIds.size()); //문제가 저장된 수만큼 랜덤하게 저장
       for(int i = 0; i < numProblems; i++) { //
           String problemId = allProblemIds.get(i);
           String problem = problems.get(problemId);

           System.out.println("문제 Id : "+problemId);
           System.out.println("문제 : "+problem);
           String answer = " ";
           while (!(answer.equals("O") || answer.equals("X"))) {
               System.out.println("답을 입력하세요: (O/X)");
               answer = scan.nextLine().toUpperCase();
               if (!(answer.equals("O") || answer.equals("X"))) {
                   System.out.println("답변은 'O' 또는 'X'로 입력해주세요.");
               }
           }

           userAnswers.put(problemId, answer);
       }
       System.out.println("문제를 다 풀었습니다.");
       }
   
   

   
   
   
   
   public void loadProblems() {
	    String fileName = "problems1.txt";

	    try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
	        String line;
	        while ((line = br.readLine()) != null) {
	            String[] split = line.split(","); // 쉼표(,)로 데이터를 분리합니다.
	            String problemId = split[0].trim(); // 문제 ID를 추출합니다.
	            String subject = split[1].trim(); // 과목을 추출합니다.
	            String problem = split[2].trim(); // 문제 내용을 추출합니다.
	            String explains = split[3].trim(); // 해설을 추출합니다.
	            String answer = split[4].trim(); // 정답을 추출합니다.

	            // 문제 ID를 키로 하여 문제, 해설, 정답을 저장합니다.
	            problems.put(problemId, problem);
	            problemAnswers.put(problemId, answer);
	            problemExplain.put(problemId, explains);
                         
                         problemSubject.put(problemId, subject);

	            ArrayList<String> subjectProblems = problemsBySubject.get(subject);
	            if (subjectProblems == null) {
	                subjectProblems = new ArrayList<>();
	                problemsBySubject.put(subject, subjectProblems);
	            }
	            subjectProblems.add(problemId);
	        }
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	}

  

   public void Resert(Scanner scan) {
      int total = 0;
       int correct = 0;

       for (String problemId : userAnswers.keySet()) {
           String correctAnswer = problemAnswers.get(problemId);
           String userAnswer = userAnswers.get(problemId);
           String expalains = problemExplain.get(problemId);
           //problemExplain.put(problemId, explains);
         


           if (correctAnswer != null && correctAnswer.toUpperCase().equals(userAnswer)) { //+"." 있었다
               correct++;
               tmp.put(problemId, expalains);
           }
           total++;
       }
       
       System.out.println("총 문제 수: " + total);
       System.out.println("정답 수: " + correct);
       System.out.println("해설"+tmp);

   }

  
   //ox문제 입력한것을 변형문제 생성 메서드
   public void WorkbookModify(Scanner scan) {
      
      //ox문제 유형 3가지
      //1.입력된 문제를 숫자를 지워서 빈칸화
      //2.입력된 문제를 숫자를 대체
      //3.텍스트를 입력 및 특정텍스트를 변환
      
   }

   public void signUp(Scanner scan) {
      System.out.println("[회원가입] 아이디 입력 >");
      String id = scan.nextLine();
      
      System.out.println("[회원가입] 비밀번호 입력 >");
      String password = scan.nextLine();
      
      System.out.println("관리자 계정이면 'admin', 일반 사용자 계정이면 'user'를 입력해주세요.");
      String usertype = scan.nextLine();
      
      if(usertype.equals("admin") || usertype.equals("user")){
         users.put(id, password + ","+usertype);
         System.out.println("┌───────────────────┐\r\n"
                  + "      회원가입 완료!\r\n"
                  + "└───────────────────┘\r\n"
                  + "");

      }
      else {
         System.out.println("사용자 유형을 제대로 입력해주세요.");
      }
      if(usertype.equals("admin")) {
         this.loggedInUserType = "admin";
      }
      else {
         this.loggedInUserType = "user";
      }
      System.out.println("회원가입이 완료되었습니다.");
         
      
   }
  
  
   public void chapter(Scanner scan) {
       System.out.println("PESS ENTER KEY PLEASE .");
       String enterKey = scan.nextLine();

       System.out.println("과목의 수를 입력해주세요.");
       int totalSubjects = Integer.parseInt(scan.nextLine());

       // 과목 정보 입력
       HashMap<String, HashMap<String, HashMap<String, String>>> subjects = new HashMap<>();
       for (int i = 1; i <= totalSubjects; i++) {
           System.out.println("과목 " + i + " 이름을 입력해주세요.");
           String subjectName = scan.nextLine();

           System.out.println("대단원의 수를 입력해주세요.");
           int totalBigUnits = Integer.parseInt(scan.nextLine());
           HashMap<String, HashMap<String, String>> bigUnits = new HashMap<>();

           // 대단원 정보 입력
           for (int j = 1; j <= totalBigUnits; j++) {
               System.out.println("대단원 " + j + " 이름을 입력해주세요.");
               String bigUnitName = scan.nextLine();

              // System.out.println("소단원의 수를 입력해주세요.");
               //int totalSubUnits = Integer.parseInt(scan.nextLine());
               int totalSubUnits = 0;
               HashMap<String, String> subUnits = new HashMap<>();
               

               // 소단원 정보 입력
               for (int k = 1; k <= totalSubUnits; k++) {
                   //System.out.println("소단원 " + k + " 이름을 입력해주세요.");
                  // String subUnitName = scan.nextLine();
                  // subUnits.put(subUnitName, "");
                   
                   /*

                   // ox문제 입력
                   System.out.println("소단원 " + subUnitName + "의 ox문제를 입력해주세요.");
                   String Id = scan.nextLine();
                   System.out.println("소단원 " + subUnitName + " 문제를 입력해주세요.");
                   String pb = scan.nextLine();
                   System.out.println("소단원 " + subUnitName + " 해설을 입력해주세요.");
                   String ex = scan.nextLine();

                   String as = "";
                   while (!(as.equals("O") || as.equals("X"))) {
                       System.out.println("소단원 " + subUnitName + " (O/X)입력해주세요");
                       as = scan.nextLine().toUpperCase();
                       if (!(as.equals("O") || as.equals("X"))) {
                           System.out.println("입력은 'O' 또는 'X'로 입력해주세요.");
                       }
                   }
               

                   problems.put(Id, pb);
                   problemAnswers.put(Id, as);
                   problemExplain.put(Id, ex);
                   */
               }

               bigUnits.put(bigUnitName, subUnits);
           }

           subjects.put(subjectName, bigUnits);
       }
   }
   
   public void solveProblemsAndSaveToFile666(Scanner scan) {
	    String fileNameProblems = "writer_problems_" + System.currentTimeMillis() + ".txt";
	    String fileNameAnswers = "writer_answers_" + System.currentTimeMillis() + ".txt";

	    try {
	        FileWriter fwProblems = new FileWriter(fileNameProblems);
	        FileWriter fwAnswers = new FileWriter(fileNameAnswers);

	        List<String> allProblemIds = new ArrayList<>(problems.keySet());
	        Collections.shuffle(allProblemIds);

	        for (String problemId : allProblemIds) {
	            String problem = problems.get(problemId);

	            // 문제를 파일에 쓰기
	            fwProblems.write("문제 ID: " + problemId + "\n");
	            fwProblems.write("문제: " + problem + "\n\n");

	            // 답안을 파일에 쓰기
	            fwAnswers.write("문제 ID: " + problemId + "\n");
	            fwAnswers.write("답안: " + problemAnswers.get(problemId) + "\n\n");
	        }

	        fwProblems.close();
	        fwAnswers.close();

	        System.out.println("문제를 다 풀었습니다.");
	        System.out.println("문제, 답안 파일에 쓰기가 완료되었습니다.");
	        System.out.println("문제 파일명: " + fileNameProblems);
	        System.out.println("답안 파일명: " + fileNameAnswers);
	    } catch (IOException e) {
	        System.out.println("파일 쓰기 중 오류가 발생했습니다: " + e.getMessage());
	    }
	}
   
   public void solveProblemsAndSaveToFile6666() {
       String fileNameProblems = "writer_problems_" + System.currentTimeMillis() + ".txt";
       String fileNameAnswers = "writer_answers_" + System.currentTimeMillis() + ".txt";

       try {
           FileWriter fwProblems = new FileWriter(fileNameProblems);
           FileWriter fwAnswers = new FileWriter(fileNameAnswers);

           List<String> allProblemIds = new ArrayList<>(problems.keySet());
           Collections.shuffle(allProblemIds);

           for (String problemId : allProblemIds) {
               String problem = problems.get(problemId);

               // 문제를 파일에 쓰기
               fwProblems.write("문제 ID: " + problemId + "\n");
               fwProblems.write("문제: " + problem + "\n\n");

               // 답안을 파일에 쓰기
               fwAnswers.write("문제 ID: " + problemId + "\n");
               fwAnswers.write("답안: " + problemAnswers.get(problemId) + "\n\n");
           }

           fwProblems.close();
           fwAnswers.close();

           System.out.println("문제를 다 풀었습니다.");
           System.out.println("문제, 답안 파일에 쓰기가 완료되었습니다.");
           System.out.println("문제 파일명: " + fileNameProblems);
           System.out.println("답안 파일명: " + fileNameAnswers);
       } catch (IOException e) {
           System.out.println("파일 쓰기 중 오류가 발생했습니다: " + e.getMessage());
       }
   }
   
   public void loadProblems1() {
	    String fileName = "problems1.txt";

	    try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
	        String line;
	        while ((line = br.readLine()) != null) {
	            String[] split = line.split(","); // 쉼표(,)로 데이터를 분리합니다.
	           
	            String problemId = "Q" + idCounter++;
	         
	            
	            String problem = split[0].trim(); // 문제 내용을 추출합니다.
	          
	            String answer = split[1].trim(); // 정답을 추출합니다.
	            
	            

	            // 문제 ID를 키로 하여 문제, 해설, 정답을 저장합니다.
	            problems.put(problemId, problem);
	            problemAnswers.put(problemId, answer);
	          
                        
                     

	           
	        }
	    } catch (IOException e) {
	        e.printStackTrace();
	    }
	}

   
   

   

   
   public void signIn(Scanner scan) {
      boolean loginSuccess = false;

      while(!loginSuccess) {
          System.out.println("[로그인] 아이디 입력 >");
          String id = scan.nextLine();

          System.out.println("[로그인] 비밀번호 입력 >");
          String password = scan.nextLine();

          if(users.containsKey(id)) {
              String[] userInfo = users.get(id).split(",");
              if(userInfo[0].equals(password)) {
                  loggedInId = id;
                  String userType = userInfo[1];
                  System.out.println("┌───────────────────┐\r\n"
                                + "      로그인 성공!\r\n"
                                + "└───────────────────┘\r\n"
                                + ""); 
                  loginSuccess = true;
              }
              else {
                  System.out.println("▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄\r\n"
                          + "████▌▄▌▄▐▐▌█████\r\n"
                          + "████▌▄▌▄▐▐▌▀████\r\n"
                          + "████████████████");
              }
          }
          else {
              System.out.println("해당 Id가 존재하지 않습니다.");
          }
      }
   }
}
